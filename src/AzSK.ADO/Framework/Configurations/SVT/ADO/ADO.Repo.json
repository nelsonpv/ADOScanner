{
  "FeatureName": "Repo",
  "Reference": "aka.ms/azsktcp/Repo",
  "IsMaintenanceMode": false,
  "Controls": [
    {
      "ControlID": "ADO_Repo_DP_Inactive_Repo",
      "Description": "Check the repo to be inactive or not.",
      "Id": "Repo110",
      "ControlSeverity": "High",
      "Automated": "Yes",
      "MethodName": "CheckInactiveRepo",
      "Rationale": "Checks whether the repo is inactive or not based on the last pull-request.",
      "Recommendation": "Refer: https://docs.microsoft.com/en-us/rest/api/azure/devops/git/pull%20requests/get%20pull%20request?view=azure-devops-rest-6.0",
      "Tags": [
        "SDL",
        "TCP",
        "Automated",
        "DP"
      ],
      "Enabled": true
    },
    {
      "ControlID": "ADO_Repo_AuthZ_Disable_Inherited_Permissions",
      "Description": "Do not allow inherited permission on repo definitions.",
      "Id": "Repo120",
      "ControlSeverity": "High",
      "Automated": "Yes",
      "MethodName": "CheckInheritedPermissions",
      "Rationale": "Disabling inherited permissions lets you finely control access to various operations at the repo level for different stakeholders. This ensures that you follow the principle of least privilege and provide access only to the persons that require it.",
      "Recommendation": "To disable inheritance follow the steps given here: 1.Navigate to the repo pipeline. 2. Select three dots (present at right top). 3. Click Manage Security 4. Add the service lead & service owner as Users with Allow permissions for each permission line item. 5. Disable Inheritance. 6. Add users/groups to your repo definition and provide only required access. As best practice, All teams/groups must be granted minimum required permissions on repo definition.",
      "Tags": [
        "SDL",
        "TCP",
        "Automated",
        "AuthZ"
      ],
      "Enabled": true
    },
    {
      "ControlID": "ADO_Repo_AuthZ_Grant_Min_RBAC_Access",
      "Description": "Get the repo's inherited permissions list.",
      "Id": "Repo130",
      "ControlSeverity": "High",
      "Automated": "Yes",
      "MethodName": "CheckRBACAccess",
      "Rationale": "Granting minimum access by leveraging RBAC feature ensures that users are granted just enough permissions to perform their tasks. This minimizes exposure of the resources in case of user/service account compromise.",
      "Recommendation": "Refer: https://docs.microsoft.com/en-us/azure/devops/pipelines/policies/permissions?view=vsts",
      "Tags": [
        "SDL",
        "TCP",
        "Automated",
        "AuthZ",
        "RBAC"
      ],
      "Enabled": true
    }
  ]
}